규칙 ID: R001
카테고리: Naming
제목: 변수 및 함수는 lowerCamelCase 사용
설명: 변수명과 함수명은 소문자로 시작하고 단어마다 대문자를 사용하는 lowerCamelCase 형식을 따른다.
좋은 예: getUserName(), userName
나쁜 예: GetUserName(), user_name

규칙 ID: R002
카테고리: Naming
제목: 클래스 및 생성자는 PascalCase 사용
설명: 클래스명과 생성자명은 단어의 첫 글자를 모두 대문자로 표기하는 PascalCase를 사용한다.
좋은 예: UserProfile, OrderService
나쁜 예: userProfile, user_service

규칙 ID: R003
카테고리: Naming
제목: 상수는 대문자와 언더스코어 사용
설명: 상수는 대문자와 언더스코어(_)를 조합하여 작성하며, 의미가 명확하게 드러나도록 한다.
좋은 예: MAX_SIZE, DEFAULT_TIMEOUT
나쁜 예: MaxSize, maxSize

규칙 ID: R004
카테고리: Naming
제목: 이벤트 핸들러 함수는 on 접두어 사용
설명: 이벤트 핸들러는 'on'으로 시작하는 함수명으로 정의한다.
좋은 예: onClick(), onSubmit()
나쁜 예: clickHandler(), submitEvent()

규칙 ID: R005
카테고리: Naming
제목: 약어 대신 의미가 드러나는 명명 사용
설명: 이해하기 쉬운 명확한 변수명/함수명을 사용하며, 축약은 지양한다.
좋은 예: userProfile, orderHistory
나쁜 예: usrPrf, ordHist

규칙 ID: R006
카테고리: Declaration
제목: 한 줄에 하나의 명령문만 작성
설명: 각 명령문은 별도의 줄에 작성하여 가독성을 높인다.
좋은 예: int a = 1;
int b = 2;
나쁜 예: int a = 1; int b = 2;

규칙 ID: R007
카테고리: Syntax
제목: 조건문 및 반복문은 항상 중괄호 사용
설명: 한 줄짜리 구문이라도 모든 제어문에 중괄호를 포함시켜야 한다.
좋은 예: if (x > 0) { return x; }
나쁜 예: if (x > 0) return x;

규칙 ID: R008
카테고리: Syntax
제목: 중괄호는 닫기 전에 줄 바꿈
설명: 블록을 닫기 전에는 항상 줄 바꿈을 적용한다.
좋은 예: function hello() {
  return true;
}
나쁜 예: function hello() {
  return true;}

규칙 ID: R009
카테고리: Best Practice
제목: null은 Optional 또는 안전한 기본값으로 처리
설명: null 처리는 Optional 패턴이나 orElseThrow 등 명시적인 방식으로 처리한다.
좋은 예: Optional.of(user).orElseThrow()
나쁜 예: if (user == null) return;

규칙 ID: R010
카테고리: Architecture
제목: Controller는 서비스 호출과 예외 처리만 담당
설명: Controller에는 비즈니스 로직을 작성하지 않고, 서비스 호출과 예외 처리만 수행한다.
좋은 예: return memberService.register(dto);
나쁜 예: if (dto.isValid()) { repository.save(dto); }

